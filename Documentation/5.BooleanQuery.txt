Boolean Query:
A query that matches documents matching boolean combinations of other queries. 
The bool query maps to Lucene BooleanQuery. 
It is built using one or more boolean clauses, each clause with a typed occurrence. 
The occurrence types are:

1. must 
The clause (query) must appear in matching documents and will contribute to the score.

2. filter
The clause (query) must appear in matching documents. 
However unlike must the score of the query will be ignored. 
Filter clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching.

3. should 
The clause (query) should appear in the matching document.

4. must_not
The clause (query) must not appear in the matching documents. 
Clauses are executed in filter context meaning that scoring is ignored and clauses are considered for caching. 
Because scoring is ignored, a score of 0 for all documents is returned.


The bool query takes a more-matches-is-better approach, 
so the score from each matching must or should clause will be added together to provide the final _score for each document.

POST _search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "user.id" : "kimchy" }
      },
      "filter": {
        "term" : { "tags" : "production" }
      },
      "must_not" : {
        "range" : {
          "age" : { "gte" : 10, "lte" : 20 }
        }
      },
      "should" : [
        { "term" : { "tags" : "env1" } },
        { "term" : { "tags" : "deployed" } }
      ],
      "minimum_should_match" : 1,
      "boost" : 1.0
    }
  }
}

Here, we look at our example:
First inside our query, we have bool clause.
we are then adding the score of "must" and "should" clause inside bool clause.
"filter" and "must_not" are used to filter the documents.
Now, in "must", we are using "term" clause. That means, "user.id" filed have a value "kimchy" in the document.
in "filter", we are again using "term" clause. "tags" field should have value "produciton" in the document.
"must_not" clause has a range clause. We want to return documents, where the value of age is not >= 10 and <= 20.
Then we also have should clause.


Using "minimum_should_match" :
You can use the minimum_should_match parameter to specify the number or percentage of should clauses returned documents must match.
So that means, if either tags = env1 or tags = deployed is matched in should clause, that document is returned.
If the bool query includes at least one should clause and no must or filter clauses, the default value is 1. Otherwise, the default value is 0.


Scoring with bool.filter:
Queries specified under the filter element have no effect on scoring — scores are returned as 0. 
Scores are only affected by the query that has been specified. 
For instance, all three of the following queries return all documents where the status field contains the term active.
GET _search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
-> Check if field "status" has a value "active" in the document, those documents are returned.


This bool query has a match_all query, which assigns a score of 1.0 to all documents.
GET _search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
-> in must, we have "match_all" clause called. 
-> This will assign a score of 1 to all documents.
-> Filter will be just used to filter the document (all docs with "status" : "active" values.)

This query will behave the same way as the above query.
GET _search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}

We have a constant_score clause -> Which will assign 1.0 score to all documents.
Inside it, we have a filter clause.



Named Queries:
Each query accepts a _name in its top level definition. 
You can use named queries to track which queries matched returned documents. 
If named queries are used, the response includes a matched_queries property for each hit.
This means, we can give names to our queries :)
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { 
            "match": { 
                "name.first": { 
                    "query": "shay", 
                    "_name": "first" 
                } 
            } 
        },
        { 
            "match": { 
                "name.last": { 
                    "query": "banon", 
                    "_name": "last" 
                } 
            } 
        }
      ],
      "filter": {
        "terms": {
          "name.last": [ "banon", "kimchy" ],
          "_name": "test"
        }
      }
    }
  }
}
I belive this is what it means, 
-> We have query clause, then we have a bool clause. 
-> We have 1 should and 1 filter clause inside bool clause.
-> Inside filter clause, we have term clause for checking
-> In this term query, we are checking here if "name.last" field's value is equal to either "banon" or "kimchy".
-> We are naming this query using the "_name" clause as "test" query.
-> Inside should query, we have an array.
In this array, we have two match query.
the first match query is checking if "name.first" field's value is either "shay". this query is named "first"
Similary, the second match query is named "last"