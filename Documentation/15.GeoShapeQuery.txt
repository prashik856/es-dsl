Geo Shape

Filter documents indexed using the geo_shape or geo_point type.

The geo_shape query uses the same grid square representation as the geo_shape mapping to find documents that have a shape that intersects with the query shape. 
It will also use the same Prefix Tree configuration as defined for the field mapping.

The query supports two ways of defining the query shape, either by providing a whole shape definition, 
or by referencing the name of a shape pre-indexed in another index. 
Both formats are defined below with examples.


Inline Shape Definition:
Similar to the geo_shape type, the geo_shape query uses GeoJSON to represent shapes.
Given the following index with locations as geo_shape fields:
Defining index first
PUT /example
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}

We create a document of type geoshape.
POST /example/_doc?refresh
{
  "name": "Wind & Wetter, Berlin, Germany",
  "location": {
    "type": "point",
    "coordinates": [ 13.400544, 52.530286 ]
  }
}
Here, when defining geo_shape, we have given the type, and coordinates.


The following query will find the point using Elasticsearchâ€™s envelope GeoJSON extension:
GET /example/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_shape": {
          "location": {
            "shape": {
              "type": "envelope",
              "coordinates": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]
            },
            "relation": "within"
          }
        }
      }
    }
  }
}
Here, we have type is envelope? (rectangle?)


The above query can, similarly, be queried on geo_point fields.
Let's create an index for geo_points
PUT /example_points
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

And put geo points in them
PUT /example_points/_doc/1?refresh
{
  "name": "Wind & Wetter, Berlin, Germany",
  "location": [13.400544, 52.530286]
}

Using the same query, the documents with matching geo_point fields are returned.
GET /example_points/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_shape": {
          "location": {
            "shape": {
              "type": "envelope",
              "coordinates": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]
            },
            "relation": "intersects"
          }
        }
      }
    }
  }
}
If the document (our geo point document) will also be returned it it is inside our given envelope.



Pre - Indexed Shape:
The query also supports using a shape which has already been indexed in another index.
This is particularly useful for when you have a pre-defined list of shapes and you want to reference the list using a 
logical name (for example New Zealand) rather than having to provide coordinates each time. 
In this situation, it is only necessary to provide:

id - The ID of the document that containing the pre-indexed shape.
index - Name of the index where the pre-indexed shape is. Defaults to shapes.
path - The field specified as path containing the pre-indexed shape. Defaults to shape.
routing - The routing of the shape document if required.

The following is an example of using the Filter with a pre-indexed shape:
Creating an index with a name of shape.
PUT /shapes
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}

Putting a doc inside it of type envelope
PUT /shapes/_doc/deu
{
  "location": {
    "type": "envelope",
    "coordinates" : [[13.0, 53.0], [14.0, 52.0]]
  }
}

Then we search for it:
Here, we are looking in a different index
GET /example/_search
{
  "query": {
    "bool": {
      "filter": {
        "geo_shape": {
          "location": {
            "indexed_shape": {
              "index": "shapes",
              "id": "deu",
              "path": "location"
            }
          }
        }
      }
    }
  }
}


Spatial Relations:
The geo_shape strategy mapping parameter determines which spatial relation operators may be used at search time.
The following is a complete list of spatial relation operators available when searching a geo field:
INTERSECTS - (default) Return all documents whose geo_shape or geo_point field intersects the query geometry.
DISJOINT - Return all documents whose geo_shape or geo_point field has nothing in common with the query geometry.
WITHIN - Return all documents whose geo_shape or geo_point field is within the query geometry. Line geometries are not supported.
CONTAINS - Return all documents whose geo_shape or geo_point field contains the query geometry.


Ignore Unmapped
When set to true the ignore_unmapped option will ignore an unmapped field and will not match any documents for this query.
This can be useful when querying multiple indexes which might have different mappings. When set to false (the default value) 
the query will throw an exception if the field is not mapped.

Notes:
Geo-shape queries on geo-shapes implemented with PrefixTrees will not be executed if search.allow_expensive_queries is set to false.
When data is indexed in a geo_shape field as an array of shapes, the arrays are treated as one shape. For this reason, the following requests are equivalent.

PUT /test/_doc/1
{
  "location": [
    {
      "coordinates": [46.25,20.14],
      "type": "point"
    },
    {
      "coordinates": [47.49,19.04],
      "type": "point"
    }
  ]
}
 
PUT /test/_doc/1
{
  "location":
    {
      "coordinates": [[46.25,20.14],[47.49,19.04]],
      "type": "multipoint"
    }
}